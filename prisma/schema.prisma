// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id String @id @default(uuid())
email String @unique
password String
role UserRole @default(USER)
isPremium Boolean @default(false)
image String?
name String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
subscription subscription?
posts Post[]
votes Votes[]
ratings Ratings[]
comments Comments[]


}

model subscription {
  id String @id @default(uuid())
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  userId String @unique
  paymentStatus Boolean
  paymentMethod String
  price Int @default(1000)
  subscriptedAt DateTime @default(now())
  transaction Trnasaction? @relation()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trnasaction {
  id String @id @default(uuid())
  subscription subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String @unique
  transactionStatus String
  bank_status  String
  sp_code String
  sp_message String
  method String
  date_time String
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  image String?
  createdAt DateTime @default(now())
  posts Post[]
}
model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  price       Float
  image       String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  isPremium   Boolean  @default(false)   
  approved    Boolean  @default(false)
  status      approveStatus  @default(pending)
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  votes Votes[]
  ratings Ratings[]
 comments Comments[]
  @@map("post")

}
model Coupon {
  id                 String   @id @default(ulid())
  code               String   @unique
  discountPercentage Int
  validFrom          DateTime
  validUntil         DateTime
  isActive           Boolean  @default(true)
  usageLimit         Int?     
  usageCount         Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Votes {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id])
  postId String
  vote votetypes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}
model Comments {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id])
  postId String
  commentText String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Ratings {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id])
  postId String
  rating Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, postId])
}
enum UserRole {
USER
ADMIN
}
enum votetypes {
UP
DOWN
}
enum approveStatus {
  approved
  rejected
  pending
}